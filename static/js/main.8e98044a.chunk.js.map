{"version":3,"sources":["BooksAPI.js","Book.js","BookList.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","state","handleChange","shelfRequested","_this","setState","BooksAPI","updatedBooks","props","onChangeShelf","_this2","this","react_default","a","createElement","className","imageLinks","style","width","height","backgroundImage","thumbnail","onClick","e","target","value","disabled","title","authors","Component","BookList","showSearchPage","updateShelf","_this3","filter","map","key","src_Book","Link","to","SearchBooks","updateQuery","trim","error","type","placeholder","onChange","BooksApp","Switch","Route","exact","path","component","React","ReactDOM","render","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8e98044a.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport * as BooksAPI from './BooksAPI'\n\nclass Book extends Component {\n\n  state = {\n    book : {}\n  }\n\n  handleChange = (shelfRequested,book) => {\n    this.setState({book})\n    BooksAPI.update(book,shelfRequested).then(updatedBooks => {\n      if (this.props.onChangeShelf)\n            this.props.onChangeShelf()\n    })\n  }\n\n  render() {\n    const { book } = this.props\n    return(\n      <div className=\"book\">\n        <div className=\"book-top\">\n          {((this.props.book.imageLinks) ?\n                  <div\n                      className=\"book-cover\"\n                      style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}>\n                  </div> :\n                  <div className=\"book-cover\">No Cover</div>\n              )}\n          <div className=\"book-shelf-changer\">\n            <select onClick={(e) => this.handleChange(e.target.value,book)}>\n              <option value=\"move\" disabled>Move to...</option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{book.title}</div>\n        <div className=\"book-authors\">{book.authors}</div>\n      </div>\n    )\n  }\n}\n\nexport default Book\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport Book from './Book'\n\nclass BookList extends Component {\n  state = {\n    showSearchPage: false,\n    books : []\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then( books => {\n      this.setState({books})\n    })\n  }\n\n  updateShelf = () => {\n    BooksAPI.getAll().then( books => {\n      this.setState({books})\n    })\n  }\n\n  render() {\n    return(\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Currently Reading</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {\n                    (this.state.books\n                      .filter((book) => (book.shelf === 'currentlyReading')))\n                        .map(book =>\n                          <li key={book.id}>\n                            <Book\n                              book={book}\n                              onChangeShelf={() => this.updateShelf()}\n                            />\n                          </li>\n                        )\n                  }\n                </ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Want to Read</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {\n                    (this.state.books\n                      .filter((book) => (book.shelf === 'wantToRead')))\n                        .map(book =>\n                          <li key={book.id}>\n                            <Book\n                              book={book}\n                              onChangeShelf={() => this.updateShelf()}\n                            />\n                          </li>\n                        )\n                  }\n                </ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">Read</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                  {\n                    (this.state.books\n                      .filter((book) => (book.shelf === 'read')))\n                        .map(book =>\n                          <li key={book.id}>\n                            <Book\n                              book={book}\n                              onChangeShelf={() => this.updateShelf()}\n                            />\n                          </li>\n                        )\n                  }\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"open-search\">\n          <Link to=\"/search\">Add a book</Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookList\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport Book from './Book'\n\nclass SearchBooks extends Component {\n\n  state = {\n    query : '',\n    books : []\n  }\n\n  updateQuery = (query) => {\n    // Update state.query on chance in order\n    // to get that value on the input below\n    // and then use it on the the search\n  \tthis.setState({ query : query.trim() })\n\n    if (query) {\n    \tBooksAPI.search(query, 20).then((books) => {\n        // responses with no books has a error property\n\n\t\t\t\tif (!books.error) {\n\t\t\t\t\tthis.setState({ books })\n\t\t\t\t}\n    \t})\n    }\n  }\n\n  updateShelf = () => {\n    if (this.props.onChangeShelf)\n          this.props.onChangeShelf()\n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link\n            className=\"close-search\"\n            to=\"/\">Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            {/*\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\n              You can find these search terms here:\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n              you don't find a specific author or title. Every search is limited by search terms.\n            */}\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={this.state.query}\n              onChange={(e) => this.updateQuery(e.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {this.state.books.map(book =>\n              <li key={book.id}>\n                <Book\n                  book={book}\n                  onChangeShelf={() => this.updateShelf()}\n                />\n              </li>\n            )}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport './App.css'\nimport BookList from './BookList'\nimport SearchBooks from './SearchBooks'\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    // showSearchPage: false,\n    // books: []\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route exact path='/' component={BookList}></Route>\n          <Route path='/search' component={SearchBooks}></Route>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}